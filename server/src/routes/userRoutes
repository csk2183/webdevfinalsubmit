const express = require('express');
const User = require('../models/User');  // Import the User model
const router = express.Router();

// Middleware to authenticate user session
const requireLogin = (req, res, next) => {
    if (!req.session.userId) {
        return res.status(401).send('Unauthorized access');
    }
    next();
};

// Register a new user
router.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
    try {
        // Check if the username or email is already in use
        const existingUser = await User.findOne({ $or: [{ username }, { email }] });
        if (existingUser) {
            return res.status(400).json({ message: 'Username or email is already in use' });
        }

        // Create a new user
        const newUser = new User({ username, email, password });
        await newUser.save();

        // Set up session for the new user
        req.session.userId = newUser._id;

        // Respond with the newly registered user
        res.status(201).json({ user: newUser });
    } catch (error) {
        res.status(500).json({ message: 'Failed to register user' });
    }
});

// Log in a user
router.post('/login', async (req, res) => {
    const { username, password } = req.body;
    try {
        // Find user by username
        const user = await User.findOne({ username });
        if (!user) {
            return res.status(401).json({ message: 'Invalid username or password' });
        }

        // Check if password matches
        const isPasswordValid = await user.comparePassword(password);
        if (!isPasswordValid) {
            return res.status(401).json({ message: 'Invalid username or password' });
        }

        // Set up session for the authenticated user
        req.session.userId = user._id;

        // Respond with the authenticated user
        res.status(200).json({ user });
    } catch (error) {
        console.error("Login error:", error);
        res.status(500).json({ message: 'Failed to login' });
    }
});

// Create Note
router.post('/notes', requireLogin, async (req, res) => {
    try {
        const { title, content } = req.body;
        const user = await User.findById(req.session.userId);
        if (!user) {
            return res.status(404).send('User not found');
        }
        // Push the new note into the user's notes array
        user.notes.push({ title, content });
        await user.save();
        res.status(201).json(user.notes[user.notes.length - 1]);  // Return the newly added note
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// Get Notes by User
router.get('/notes', requireLogin, async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        if (!user) {
            return res.status(404).send('User not found');
        }
        res.json(user.notes);  // Return all notes for the user
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// Delete Note
router.delete('/notes/:noteId', requireLogin, async (req, res) => {
    try {
        const { noteId } = req.params;
        const user = await User.findById(req.session.userId);
        if (!user) {
            return res.status(404).send('User not found');
        }
        // Remove the note by id from the user's notes array
        user.notes.id(noteId).remove();
        await user.save();
        res.status(200).send({ message: 'Note deleted successfully' });
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// Check user session
router.get('/session', (req, res) => {
    if (req.session.userId) {
        // If user is logged in, find user by id and respond with user data
        User.findById(req.session.userId)
            .then(user => {
                if (!user) {
                    throw new Error('User not found');
                }
                res.json({ user });
            })
            .catch(error => {
                console.error("Session check error:", error);
                res.status(500).json({ message: 'Failed to check session' });
            });
    } else {
        res.status(401).json({ message: 'No active session' });
    }
});

module.exports = router;
